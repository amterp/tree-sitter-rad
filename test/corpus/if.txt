===
If
===

if true:
    a = 2

---

(source_file
  (if_stmt
    alt: (if_alt
      condition: (expr
        base: (primary_expr
          (literal
            (bool))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int))))))))

===
If Else
===

if a > 2:
    b = 2
else:
    c = "hi"

---

(source_file
  (if_stmt
    alt: (if_alt
      condition: (expr
        base: (comparison_op
          left: (expr
            base: (var_path))
          right: (expr
            base: (primary_expr
              (literal
                (int))))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int))))))
    alt: (else_alt
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (string
                start: (string_start)
                contents: (string_contents
                  content: (string_content))
                end: (string_end)))))))))

===
If Else If Else
===

if a > 2:
    b = 2
    e = 2
else if a > 5:
    d = true
else:
    c = "hi"

---

(source_file
  (if_stmt
    alt: (if_alt
      condition: (expr
        base: (comparison_op
          left: (expr
            base: (var_path))
          right: (expr
            base: (primary_expr
              (literal
                (int))))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int)))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int))))))
    alt: (if_alt
      condition: (expr
        base: (comparison_op
          left: (expr
            base: (var_path))
          right: (expr
            base: (primary_expr
              (literal
                (int))))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (bool))))))
    alt: (else_alt
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (string
                start: (string_start)
                contents: (string_contents
                  content: (string_content))
                end: (string_end)))))))))
