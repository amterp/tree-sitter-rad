===
Complete
===

#!/usr/bin/env rad
---
this is a file
header

whoa! hello
---
args:
    name string
    age int = 30 # An age.
    employed bool
    foo string[] = ["blah", "bloop"]
    bar "BAR" b int[] = [4, 5]

    name enum ["alice", "bob"]
    name regex "[A-Z][a-z]*"

a = 2
a = "hello"
a = 3.14
a = true
a = [1, 2, 3]
a = {"x": 1, y: 2}

a = 3 + 5 * 3 - 1 / 0.01 % 2
a += 2
a -= 1
a *= 5
a /= 2
a %= 2

a = `hello {upper("alice")}`
print(a)

f1 = json[].id
f2 = json.hello[].blah.*.woop

rad url:
    fields f1, f2
    sort f1 desc, f2
    sort

    if a > b:
        sort f2, f1
    
    f1:
        map a -> a * 2

    f1, f2:
        color "red" ".*"

if bah > 5:
    hello = bloop

    if blah == 2:
        yoink += 2
    else if blah == 3:
        boom = "haha"

request url:
    fields f1

display:
    fields f2, f1, f3

area = [width[i] * height[i] for i in range(width)]

numbers = [1, 2, 3]
print(join(numbers, "... "))
print(join(numbers, "... ", "Okay I'll count. "))
print(join(numbers, "... ", "Okay I'll count. ", "!"))

a = nums[:]
a = nums[1:]
a = nums[1:2]
a = nums[:2]

my_headers = {
    "Authorization": "Bearer {token}",
}
response = http_post(url, body, headers=my_headers)

// text = """
// This is an
// example of text
// that "may contain quotes"!
// """
// print(text)

text = r"Hello\n{name}"
text = r'Hello\n{name}'
text = r`Hello\n{name}`

url, name = pick_from_resource("./resources/websites.json", website)
print("url: {url}, name: {name}")

$!`ls`

cmd = `curl {url}`
$cmd
fail:
    print("Oh no, curl failed!")

$cmd
recover:
    print("Oh no, curl failed!")

unsafe $!`ls`

code = $!cmd

code, stdout = $!cmd

code, stdout, stderr = $!cmd

_, _, stderr = $!cmd

quiet $!`touch {filename}.txt`

unsafe quiet $!`touch {filename}.txt`
quiet unsafe $!`touch {filename}.txt`

defer:
    $!`mv notes-tmp.txt notes.txt`
    print("Moved back!")

$!`sed -i '' "s/Version = .*/Version = {version}/" {path}`
errdefer:
    print("Undoing bump...")
    $!`git checkout -- {path}`

if false:  // failure simulation point 1
    print("Oh no! ERROR!")
    exit(1)

$!`git add {path}`
errdefer:
    print("Resetting {path}...")
    _, _ = $!`git reset {path}`

if false:  // failure simulation point 2
    print("Bah! ERROR!")
    exit(1)

$!`git commit -m "Bump version to {version}"`

---

(source_file
  (shebang)
  (file_header
    contents: (file_header_contents))
  (arg_block
    body: (arg_declaration
      (identifier)
      (type_andor_default))
    body: (arg_declaration
      (identifier)
      (type_andor_default
        (arg_int_default
          (int)))
      (arg_comment
        (comment_text)))
    body: (arg_declaration
      (identifier)
      (type_andor_default))
    body: (arg_declaration
      (identifier)
      (type_andor_default
        (arg_string_list_default
          (string_list
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end))))))
    body: (arg_declaration
      (identifier)
      (string
        (string_start)
        (string_content)
        (string_end))
      (shorthand_flag)
      (type_andor_default
        (arg_int_list_default
          (int_list
            (int)
            (int)))))
    body: (arg_constraint
      (arg_enum_constraint
        (identifier)
        (string_list
          (string
            (string_start)
            (string_content)
            (string_end))
          (string
            (string_start)
            (string_content)
            (string_end)))))
    body: (arg_constraint
      (arg_regex_constraint
        (identifier)
        (string
          (string_start)
          (string_content)
          (string_end)))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (int))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (string
          (string_start)
          (string_content)
          (string_end)))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (float))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (bool))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (list
          (literal
            (int))
          (literal
            (int))
          (literal
            (int))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (map
          (map_entry
            key: (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (string_end))))
            value: (primary_expr
              (literal
                (int))))
          (map_entry
            key: (primary_expr
              (var_path
                root: (identifier)))
            value: (primary_expr
              (literal
                (int))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (binary_op
        left: (primary_expr
          (binary_op
            left: (primary_expr
              (literal
                (int)))
            right: (primary_expr
              (binary_op
                left: (primary_expr
                  (literal
                    (int)))
                right: (primary_expr
                  (literal
                    (int)))))))
        right: (primary_expr
          (binary_op
            left: (primary_expr
              (binary_op
                left: (primary_expr
                  (literal
                    (int)))
                right: (primary_expr
                  (literal
                    (float)))))
            right: (primary_expr
              (literal
                (int))))))))
  (compound_assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (int))))
  (compound_assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (int))))
  (compound_assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (int))))
  (compound_assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (int))))
  (compound_assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (int))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (string
          (string_start)
          (string_content)
          (interpolation
            expr: (primary_expr
              (call
                func: (identifier)
                args: (call_arg_list
                  (primary_expr
                    (literal
                      (string
                        (string_start)
                        (string_content)
                        (string_end))))))))
          (string_end)))))
  (expr_stmt
    (primary_expr
      (call
        func: (identifier)
        args: (call_arg_list
          (primary_expr
            (var_path
              root: (identifier)))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (json_path
      (identifier)))
  (assign
    left: (var_path
      root: (identifier))
    right: (json_path
      (identifier)
      (identifier)
      (identifier)))
  (rad_block
    rad_type: (rad_keyword)
    source: (primary_expr
      (var_path
        root: (identifier)))
    body: (rad_field_stmt
      (identifier)
      (identifier))
    body: (rad_sort_stmt
      (identifier)
      (identifier))
    body: (rad_sort_stmt)
    body: (rad_if_stmt
      condition: (comparison_op
        (primary_expr
          (var_path
            root: (identifier)))
        (primary_expr
          (var_path
            root: (identifier))))
      body: (rad_sort_stmt
        (identifier)
        (identifier)))
    body: (rad_field_modifier_stmt
      (identifier)
      body: (rad_field_mod_map
        (lambda
          (identifier)
          (primary_expr
            (binary_op
              left: (primary_expr
                (var_path
                  root: (identifier)))
              right: (primary_expr
                (literal
                  (int))))))))
    body: (rad_field_modifier_stmt
      (identifier)
      (identifier)
      body: (rad_field_mod_color
        (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (string_end))))
        (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (string_end)))))))
  (if_stmt
    condition: (comparison_op
      (primary_expr
        (var_path
          root: (identifier)))
      (primary_expr
        (literal
          (int))))
    body: (assign
      left: (var_path
        root: (identifier))
      right: (primary_expr
        (var_path
          root: (identifier))))
    body: (if_stmt
      condition: (comparison_op
        (primary_expr
          (var_path
            root: (identifier)))
        (primary_expr
          (literal
            (int))))
      body: (compound_assign
        left: (var_path
          root: (identifier))
        right: (primary_expr
          (literal
            (int))))
      alternative: (elif_clause
        condition: (comparison_op
          (primary_expr
            (var_path
              root: (identifier)))
          (primary_expr
            (literal
              (int))))
        body: (assign
          left: (var_path
            root: (identifier))
          right: (primary_expr
            (literal
              (string
                (string_start)
                (string_content)
                (string_end))))))))
  (rad_block
    rad_type: (request_keyword)
    source: (primary_expr
      (var_path
        root: (identifier)))
    body: (rad_field_stmt
      (identifier)))
  (rad_block
    rad_type: (display_keyword)
    body: (rad_field_stmt
      (identifier)
      (identifier)
      (identifier)))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (list_comprehension
        expr: (primary_expr
          (binary_op
            left: (primary_expr
              (var_path
                root: (identifier)
                indexing: (primary_expr
                  (var_path
                    root: (identifier)))))
            right: (primary_expr
              (var_path
                root: (identifier)
                indexing: (primary_expr
                  (var_path
                    root: (identifier)))))))
        left: (identifier)
        right: (primary_expr
          (call
            func: (identifier)
            args: (call_arg_list
              (primary_expr
                (var_path
                  root: (identifier)))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (list
          (literal
            (int))
          (literal
            (int))
          (literal
            (int))))))
  (expr_stmt
    (primary_expr
      (call
        func: (identifier)
        args: (call_arg_list
          (primary_expr
            (call
              func: (identifier)
              args: (call_arg_list
                (primary_expr
                  (var_path
                    root: (identifier)))
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))))))
  (expr_stmt
    (primary_expr
      (call
        func: (identifier)
        args: (call_arg_list
          (primary_expr
            (call
              func: (identifier)
              args: (call_arg_list
                (primary_expr
                  (var_path
                    root: (identifier)))
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end))))
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))))))
  (expr_stmt
    (primary_expr
      (call
        func: (identifier)
        args: (call_arg_list
          (primary_expr
            (call
              func: (identifier)
              args: (call_arg_list
                (primary_expr
                  (var_path
                    root: (identifier)))
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end))))
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end))))
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (var_path
        root: (identifier)
        indexing: (slice))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (var_path
        root: (identifier)
        indexing: (slice
          start: (primary_expr
            (literal
              (int)))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (var_path
        root: (identifier)
        indexing: (slice
          start: (primary_expr
            (literal
              (int)))
          end: (primary_expr
            (literal
              (int)))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (var_path
        root: (identifier)
        indexing: (slice
          end: (primary_expr
            (literal
              (int)))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (map
          (map_entry
            key: (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (string_end))))
            value: (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (interpolation
                    expr: (primary_expr
                      (var_path
                        root: (identifier))))
                  (string_end)))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (call
        func: (identifier)
        args: (call_arg_list
          (primary_expr
            (var_path
              root: (identifier)))
          (primary_expr
            (var_path
              root: (identifier)))
          (call_named_arg
            name: (identifier)
            value: (primary_expr
              (var_path
                root: (identifier))))))))
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (string
          (string_start)
          (string_content)
          (string_end)))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (string
          (string_start)
          (string_content)
          (string_end)))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (string
          (string_start)
          (string_content)
          (string_end)))))
  (assign
    left: (var_path
      root: (identifier))
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (call
        func: (identifier)
        args: (call_arg_list
          (primary_expr
            (literal
              (string
                (string_start)
                (string_content)
                (string_end))))
          (primary_expr
            (var_path
              root: (identifier)))))))
  (expr_stmt
    (primary_expr
      (call
        func: (identifier)
        args: (call_arg_list
          (primary_expr
            (literal
              (string
                (string_start)
                (string_content)
                (interpolation
                  expr: (primary_expr
                    (var_path
                      root: (identifier))))
                (string_content)
                (interpolation
                  expr: (primary_expr
                    (var_path
                      root: (identifier))))
                (string_end))))))))
  (expr_stmt
    (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (string_end)))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (primary_expr
      (literal
        (string
          (string_start)
          (string_content)
          (interpolation
            expr: (primary_expr
              (var_path
                root: (identifier))))
          (string_end)))))
  (expr_stmt
    (shell_cmd
      (checked_shell_cmd
        command: (primary_expr
          (var_path
            root: (identifier)))
        (shell_body_type)
        body: (expr_stmt
          (primary_expr
            (call
              func: (identifier)
              args: (call_arg_list
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))))))
  (expr_stmt
    (shell_cmd
      (checked_shell_cmd
        command: (primary_expr
          (var_path
            root: (identifier)))
        (shell_body_type)
        body: (expr_stmt
          (primary_expr
            (call
              func: (identifier)
              args: (call_arg_list
                (primary_expr
                  (literal
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))))))
  (expr_stmt
    (shell_cmd
      (shell_modifier)
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (string_end)))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (var_path
            root: (identifier))))))
  (assign
    left: (var_path
      root: (identifier))
    left: (var_path
      root: (identifier))
    right: (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (var_path
            root: (identifier))))))
  (assign
    left: (var_path
      root: (identifier))
    left: (var_path
      root: (identifier))
    left: (var_path
      root: (identifier))
    right: (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (var_path
            root: (identifier))))))
  (assign
    left: (var_path
      root: (identifier))
    left: (var_path
      root: (identifier))
    left: (var_path
      root: (identifier))
    right: (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (var_path
            root: (identifier))))))
  (expr_stmt
    (shell_cmd
      (shell_modifier)
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (interpolation
                expr: (primary_expr
                  (var_path
                    root: (identifier))))
              (string_content)
              (string_end)))))))
  (expr_stmt
    (shell_cmd
      (shell_modifier)
      (shell_modifier)
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (interpolation
                expr: (primary_expr
                  (var_path
                    root: (identifier))))
              (string_content)
              (string_end)))))))
  (expr_stmt
    (shell_cmd
      (shell_modifier)
      (shell_modifier)
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (interpolation
                expr: (primary_expr
                  (var_path
                    root: (identifier))))
              (string_content)
              (string_end)))))))
  (defer_block
    body: (expr_stmt
      (shell_cmd
        (critical_shell_cmd
          command: (primary_expr
            (literal
              (string
                (string_start)
                (string_content)
                (string_end)))))))
    body: (expr_stmt
      (primary_expr
        (call
          func: (identifier)
          args: (call_arg_list
            (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (string_end)))))))))
  (expr_stmt
    (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (interpolation
                expr: (primary_expr
                  (var_path
                    root: (identifier))))
              (string_content)
              (interpolation
                expr: (primary_expr
                  (var_path
                    root: (identifier))))
              (string_end)))))))
  (errdefer_block
    body: (expr_stmt
      (primary_expr
        (call
          func: (identifier)
          args: (call_arg_list
            (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (string_end))))))))
    body: (expr_stmt
      (shell_cmd
        (critical_shell_cmd
          command: (primary_expr
            (literal
              (string
                (string_start)
                (string_content)
                (interpolation
                  expr: (primary_expr
                    (var_path
                      root: (identifier))))
                (string_end))))))))
  (if_stmt
    condition: (primary_expr
      (literal
        (bool)))
    (comment)
    body: (expr_stmt
      (primary_expr
        (call
          func: (identifier)
          args: (call_arg_list
            (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (string_end))))))))
    body: (expr_stmt
      (primary_expr
        (call
          func: (identifier)
          args: (call_arg_list
            (primary_expr
              (literal
                (int))))))))
  (expr_stmt
    (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (interpolation
                expr: (primary_expr
                  (var_path
                    root: (identifier))))
              (string_end)))))))
  (errdefer_block
    body: (expr_stmt
      (primary_expr
        (call
          func: (identifier)
          args: (call_arg_list
            (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (interpolation
                    expr: (primary_expr
                      (var_path
                        root: (identifier))))
                  (string_content)
                  (string_end))))))))
    body: (assign
      left: (var_path
        root: (identifier))
      left: (var_path
        root: (identifier))
      right: (shell_cmd
        (critical_shell_cmd
          command: (primary_expr
            (literal
              (string
                (string_start)
                (string_content)
                (interpolation
                  expr: (primary_expr
                    (var_path
                      root: (identifier))))
                (string_end))))))))
  (if_stmt
    condition: (primary_expr
      (literal
        (bool)))
    (comment)
    body: (expr_stmt
      (primary_expr
        (call
          func: (identifier)
          args: (call_arg_list
            (primary_expr
              (literal
                (string
                  (string_start)
                  (string_content)
                  (string_end))))))))
    body: (expr_stmt
      (primary_expr
        (call
          func: (identifier)
          args: (call_arg_list
            (primary_expr
              (literal
                (int))))))))
  (expr_stmt
    (shell_cmd
      (critical_shell_cmd
        command: (primary_expr
          (literal
            (string
              (string_start)
              (string_content)
              (interpolation
                expr: (primary_expr
                  (var_path
                    root: (identifier))))
              (string_content)
              (string_end))))))))
