===
Newline, tab
===

r"\t\n"

---

(source_file
  (expr
    (ternary_expr
      delegate: (or_expr
        delegate: (and_expr
          delegate: (compare_expr
            delegate: (add_expr
              delegate: (mult_expr
                delegate: (unary_expr
                  delegate: (indexed_expr
                    root: (primary_expr
                      (literal
                        (string
                          start: (string_start)
                          contents: (string_contents
                            content: (string_content))
                          end: (string_end))))))))))))))

===
Interpolation
===

r"\{hello}"

---

(source_file
  (expr
    (ternary_expr
      delegate: (or_expr
        delegate: (and_expr
          delegate: (compare_expr
            delegate: (add_expr
              delegate: (mult_expr
                delegate: (unary_expr
                  delegate: (indexed_expr
                    root: (primary_expr
                      (literal
                        (string
                          start: (string_start)
                          contents: (string_contents
                            content: (string_content))
                          end: (string_end))))))))))))))

===
Own delimiter is error
:error
===

r"\"hello\""
r'\'hello\''
r`\`hello\``

---



===
Single escape
===

r"\"

---

(source_file
  (expr
    (ternary_expr
      delegate: (or_expr
        delegate: (and_expr
          delegate: (compare_expr
            delegate: (add_expr
              delegate: (mult_expr
                delegate: (unary_expr
                  delegate: (indexed_expr
                    root: (primary_expr
                      (literal
                        (string
                          start: (string_start)
                          contents: (string_contents
                            content: (string_content))
                          end: (string_end))))))))))))))

===
Double escape
===

r"\\"

---

(source_file
  (expr
    (ternary_expr
      delegate: (or_expr
        delegate: (and_expr
          delegate: (compare_expr
            delegate: (add_expr
              delegate: (mult_expr
                delegate: (unary_expr
                  delegate: (indexed_expr
                    root: (primary_expr
                      (literal
                        (string
                          start: (string_start)
                          contents: (string_contents
                            content: (string_content))
                          end: (string_end))))))))))))))
