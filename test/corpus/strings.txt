===
Basic double quotes
===

a = "hi"

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Basic single quotes
===

a = 'hi'

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Basic backticks
===

a = `hi`

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Interpolation
===

"hello {name}"

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            contents: (interpolation
              expr: (expr
                (primary_expr
                  (var_path
                    root: (identifier)))))
            end: (string_end)))))))

===
Raw string
===

r"hello {name}"

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Interpolation fancy
===

"hello {2 + 2}"

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            contents: (interpolation
              expr: (expr
                (primary_expr
                  (binary_op
                    left: (primary_expr
                      (literal
                        (int)))
                    right: (primary_expr
                      (literal
                        (int)))))))
            end: (string_end)))))))

===
Nested double quotes
===

"'hello'"
"`hello`"

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end))))))
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Nested single quotes
===

'"hello"'
'`hello`'

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end))))))
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Nested backtick
===

`"hello"`
`'hello'`

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end))))))
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Empty
===

""
''
``

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            end: (string_end))))))
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            end: (string_end))))))
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            end: (string_end)))))))
