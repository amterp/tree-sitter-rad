===
Fail simple
===

$`ls -n`
fail:
    a = 2
    b = 2

---

(source_file
  (shell_stmt
    shell_cmd: (checked_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end)))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int)))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int))))))))

===
Fail var
===

cmd = `ls -n`
$cmd
fail:
    a = 2
    b = 2

---

(source_file
  (assign
    left: (var_path)
    right: (expr
      base: (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end))))))
  (shell_stmt
    shell_cmd: (checked_shell_cmd
      command: (expr
        base: (var_path))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int)))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int))))))))

===
Recover
===

$`ls -n`
recover:
    a = 2
    b = 2

---

(source_file
  (shell_stmt
    shell_cmd: (checked_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end)))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int)))))
      stmt: (assign
        left: (var_path)
        right: (expr
          base: (primary_expr
            (literal
              (int))))))))

===
Critical simple
===

$!`ls -n`

---

(source_file
  (shell_stmt
    shell_cmd: (critical_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end))))))))

===
Critical var
===

cmd = `ls -n` 
$!cmd

---

(source_file
  (assign
    left: (var_path)
    right: (expr
      base: (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end))))))
  (shell_stmt
    shell_cmd: (critical_shell_cmd
      command: (expr
        base: (primary_expr)))))

===
Single assign
===

a = $!`ls -n`

---

(source_file
  (shell_stmt
    left: (var_path)
    shell_cmd: (critical_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end))))))))

===
Double assign
===

a, b = $!`ls -n`

---

(source_file
  (shell_stmt
    left: (var_path)
    left: (var_path)
    shell_cmd: (critical_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end))))))))

===
Triple assign
===

a, b, c = $!`ls -n`

---

(source_file
  (shell_stmt
    left: (var_path)
    left: (var_path)
    left: (var_path)
    shell_cmd: (critical_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end))))))))

===
Underscore assigns
===

_, _, _ = $!`ls -n`

---

(source_file
  (shell_stmt
    left: (var_path)
    left: (var_path)
    left: (var_path)
    shell_cmd: (critical_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end))))))))

===
Assign checked
===

a, b = $`ls -n`
fail:
  print("hi")
  print("there")

---

(source_file
  (shell_stmt
    left: (var_path)
    left: (var_path)
    shell_cmd: (checked_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end)))))
      stmt: (expr
        base: (call
          arg: (expr
            base: (primary_expr
              (literal
                (string
                  start: (string_start)
                  contents: (string_contents
                    content: (string_content))
                  end: (string_end)))))))
      stmt: (expr
        base: (call
          arg: (expr
            base: (primary_expr
              (literal
                (string
                  start: (string_start)
                  contents: (string_contents
                    content: (string_content))
                  end: (string_end))))))))))

===
Modifiers
===

a, b = unsafe quiet $`ls -n`
a, b = quiet unsafe $`ls -n`

---

(source_file
  (shell_stmt
    left: (var_path)
    left: (var_path)
    shell_cmd: (unsafe_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end)))))))
  (shell_stmt
    left: (var_path)
    left: (var_path)
    shell_cmd: (unsafe_shell_cmd
      command: (expr
        base: (primary_expr
          (literal
            (string
              start: (string_start)
              contents: (string_contents
                content: (string_content))
              end: (string_end))))))))
