===
Basic
===

a > 2 ? "true" : "false"

---

(source_file
  (expr_stmt
    (expr
      (ternary
        condition: (expr
          (comparison_op
            left: (primary_expr
              (var_path
                root: (identifier)))
            right: (primary_expr
              (literal
                (int)))))
        true_branch: (expr
          (primary_expr
            (literal
              (string
                start: (string_start)
                contents: (string_contents
                  content: (string_content))
                end: (string_end)))))
        false_branch: (expr
          (primary_expr
            (literal
              (string
                start: (string_start)
                contents: (string_contents
                  content: (string_content))
                end: (string_end)))))))))

===
Assignment
===

b = a > 2 ? "true" : "false"

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (ternary
        condition: (expr
          (comparison_op
            left: (primary_expr
              (var_path
                root: (identifier)))
            right: (primary_expr
              (literal
                (int)))))
        true_branch: (expr
          (primary_expr
            (literal
              (string
                start: (string_start)
                contents: (string_contents
                  content: (string_content))
                end: (string_end)))))
        false_branch: (expr
          (primary_expr
            (literal
              (string
                start: (string_start)
                contents: (string_contents
                  content: (string_content))
                end: (string_end)))))))))

===
Nested
===

b = a > 2 ? b > 2 ? 1 : 0 : c > 2 ? 1 : 0

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (ternary
        condition: (expr
          (comparison_op
            left: (primary_expr
              (var_path
                root: (identifier)))
            right: (primary_expr
              (literal
                (int)))))
        true_branch: (expr
          (ternary
            condition: (expr
              (comparison_op
                left: (primary_expr
                  (var_path
                    root: (identifier)))
                right: (primary_expr
                  (literal
                    (int)))))
            true_branch: (expr
              (primary_expr
                (literal
                  (int))))
            false_branch: (expr
              (primary_expr
                (literal
                  (int))))))
        false_branch: (expr
          (ternary
            condition: (expr
              (comparison_op
                left: (primary_expr
                  (var_path
                    root: (identifier)))
                right: (primary_expr
                  (literal
                    (int)))))
            true_branch: (expr
              (primary_expr
                (literal
                  (int))))
            false_branch: (expr
              (primary_expr
                (literal
                  (int))))))))))

===
Multiline
:error
===

c = a < 10
    ? "smaller!"
    : "bigger!"

---


