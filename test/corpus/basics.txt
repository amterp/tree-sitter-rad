===
Assignment int
===

a = 2

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (int))))))

===
Assignment string
===

a = "hi"

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (string
            start: (string_start)
            contents: (string_contents
              content: (string_content))
            end: (string_end)))))))

===
Assignment float
===

a = 2.1

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (float))))))

===
Assignment bool
===

a = true
b = false

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (bool)))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (bool))))))

===
Assignment lists
===

a = []
a = [2, 3]
a = [2, 3,]
a = [2, 3, ]
a = ["hi"]
a = ["hi", "hello",]
a = [2.2, 3.3,]
a = [true, false, ]

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            (empty_list))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (int))))
            list_entry: (expr
              (primary_expr
                (literal
                  (int)))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (int))))
            list_entry: (expr
              (primary_expr
                (literal
                  (int)))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (int))))
            list_entry: (expr
              (primary_expr
                (literal
                  (int)))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (string
                    start: (string_start)
                    contents: (string_contents
                      content: (string_content))
                    end: (string_end))))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (string
                    start: (string_start)
                    contents: (string_contents
                      content: (string_content))
                    end: (string_end)))))
            list_entry: (expr
              (primary_expr
                (literal
                  (string
                    start: (string_start)
                    contents: (string_contents
                      content: (string_content))
                    end: (string_end))))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (float))))
            list_entry: (expr
              (primary_expr
                (literal
                  (float)))))))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (bool))))
            list_entry: (expr
              (primary_expr
                (literal
                  (bool))))))))))

===
Assignment bool
===

a = true
b = false

---

(source_file
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (bool)))))
  (assign
    left: (var_path
      root: (identifier))
    right: (expr
      (primary_expr
        (literal
          (bool))))))

===
Assignment mixed list
===

[1, true, "hi", 3.2]

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (int))))
            list_entry: (expr
              (primary_expr
                (literal
                  (bool))))
            list_entry: (expr
              (primary_expr
                (literal
                  (string
                    start: (string_start)
                    contents: (string_contents
                      content: (string_content))
                    end: (string_end)))))
            list_entry: (expr
              (primary_expr
                (literal
                  (float))))))))))

===
Assignment nested list
===

[1, true, ["hi", [2, 3]], 3.2]

---

(source_file
  (expr_stmt
    (expr
      (primary_expr
        (literal
          (list
            list_entry: (expr
              (primary_expr
                (literal
                  (int))))
            list_entry: (expr
              (primary_expr
                (literal
                  (bool))))
            list_entry: (expr
              (primary_expr
                (literal
                  (list
                    list_entry: (expr
                      (primary_expr
                        (literal
                          (string
                            start: (string_start)
                            contents: (string_contents
                              content: (string_content))
                            end: (string_end)))))
                    list_entry: (expr
                      (primary_expr
                        (literal
                          (list
                            list_entry: (expr
                              (primary_expr
                                (literal
                                  (int))))
                            list_entry: (expr
                              (primary_expr
                                (literal
                                  (int))))))))))))
            list_entry: (expr
              (primary_expr
                (literal
                  (float))))))))))
